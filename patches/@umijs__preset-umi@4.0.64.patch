diff --git a/dist/commands/dev/depBuildWorker/depBuilder.d.ts b/dist/commands/dev/depBuildWorker/depBuilder.d.ts
index 56db7cd72a0c04bfd886b89c8d4051a8ce35ccaf..04a6b4e58dc25416ac65254b5535751af665fcf9 100644
--- a/dist/commands/dev/depBuildWorker/depBuilder.d.ts
+++ b/dist/commands/dev/depBuildWorker/depBuilder.d.ts
@@ -32,6 +32,6 @@ export declare class DepBuilderInWorker {
     }): Promise<void>;
     getWebpackConfig(opts: {
         deps: Dep[];
-    }): webpack.Configuration;
+    }): any;
 }
 export {};
diff --git a/dist/commands/dev/plugins/ViteHtmlPlugin.js b/dist/commands/dev/plugins/ViteHtmlPlugin.js
index b75012b6c68d345e14a15d203b51e82e0bb8c5d4..99afc3627048c346290c37d61680caf4f021e4d2 100644
--- a/dist/commands/dev/plugins/ViteHtmlPlugin.js
+++ b/dist/commands/dev/plugins/ViteHtmlPlugin.js
@@ -37,7 +37,7 @@ function ViteHtmlPlugin(api) {
           if ((_b = req.headers.accept) == null ? void 0 : _b.includes("text/html")) {
             try {
               const viteScripts = [
-                api.appData.hasSrcDir ? "/src/.umi/umi.ts" : "/.umi/umi.ts"
+                `${api.paths.absTmpPath}/umi.ts`.replace(process.cwd(), "")
               ];
               const markupArgs = await (0, import_getMarkupArgs.getMarkupArgs)({ api });
               const opts = {
diff --git a/dist/commands/dev/watch.d.ts b/dist/commands/dev/watch.d.ts
index 5af533c52c9acb3eb552aa8c1bb7e77dbaf09061..783ec366e050a69d9893e7d17eadbaf7a44ed14d 100644
--- a/dist/commands/dev/watch.d.ts
+++ b/dist/commands/dev/watch.d.ts
@@ -5,7 +5,7 @@ export declare function watch(opts: {
     watchOpts?: chokidar.WatchOptions;
     addToUnWatches?: boolean;
     onChange: (event: string, path: string) => void;
-}): chokidar.FSWatcher;
+}): any;
 export declare function createDebouncedHandler(opts: {
     timeout?: number;
     onChange: (opts: {
diff --git a/dist/commands/generators/tsconfig.js b/dist/commands/generators/tsconfig.js
index d9c93b17b6ef4ccc30944185a627d086f8807493..7f34c2985e540d263270249da9771fc0a29c7ddb 100644
--- a/dist/commands/generators/tsconfig.js
+++ b/dist/commands/generators/tsconfig.js
@@ -59,7 +59,7 @@ var tsconfig_default = (api) => {
         (0, import_path.join)(api.cwd, "tsconfig.json"),
         `
 {
-  "extends": "./${api.appData.hasSrcDir ? "src/" : ""}.umi/tsconfig.json"
+  "extends": "${(0, import_path.relative)(process.cwd(), api.paths.absTmpPath)}/tsconfig.json"
 }
 `.trimStart()
       );
diff --git a/dist/commands/mfsu/util.d.ts b/dist/commands/mfsu/util.d.ts
index 3f28c912eddd8655180d66b6d3f1ffb22b9a5298..87d677c18d0999641b4258d570a28d6c888fee50 100644
--- a/dist/commands/mfsu/util.d.ts
+++ b/dist/commands/mfsu/util.d.ts
@@ -9,8 +9,8 @@ export declare abstract class MFSUUtilBase {
     abstract listDeps(): void;
     abstract build(force?: boolean): Promise<void>;
     prepare(): Promise<any>;
-    removeCacheJSON(): void;
-    clearAllCache(): void;
+    removeCacheJSON(): any;
+    clearAllCache(): any;
     printDeps(deps: any): void;
 }
 export declare class EagerUtil extends MFSUUtilBase {
diff --git a/dist/features/appData/appData.js b/dist/features/appData/appData.js
index 8350f6d67d4075c54936d4bf8b5a920812743e97..8f375bdc1d8904d75837a24ea39c63bfec57a429 100644
--- a/dist/features/appData/appData.js
+++ b/dist/features/appData/appData.js
@@ -54,7 +54,7 @@ var appData_default = (api) => {
     memo.apiRoutes = await routesApi.getApiRoutes({
       api
     });
-    memo.hasSrcDir = api.paths.absSrcPath.endsWith("/src");
+    memo.hasSrcDir = api.paths.absSrcPath.includes("/src");
     memo.npmClient = api.userConfig.npmClient || (0, import_utils.getNpmClient)({ cwd: api.cwd });
     memo.umi = {
       version: require("../../../package.json").version,
diff --git a/dist/features/esmi/Service.d.ts b/dist/features/esmi/Service.d.ts
index b97e349a47892eea77d2396e6f0b656781058c17..34cb1e1a740178ce7d2c780bbef2908302ebd139 100644
--- a/dist/features/esmi/Service.d.ts
+++ b/dist/features/esmi/Service.d.ts
@@ -65,7 +65,7 @@ export default class ESMIService {
      * @param data  package data
      * @returns ticketId
      */
-    build(data: IPkgData): Promise<string | undefined>;
+    build(data: IPkgData): Promise<any>;
     /**
      * get importmap from deps tree
      * @param data  package data
diff --git a/dist/features/tmpFiles/routes.js b/dist/features/tmpFiles/routes.js
index 3059f43e1539c42f5b89a7ba3814645b36842cb2..2db030f36c1e1fde768265c110d4788de39e33de 100644
--- a/dist/features/tmpFiles/routes.js
+++ b/dist/features/tmpFiles/routes.js
@@ -65,7 +65,13 @@ async function getRoutes(opts) {
           return component;
         }
         if (component.startsWith("@/")) {
-          component = component.replace("@/", "../");
+          component = component.replace(
+            "@/",
+            `${(0, import_path.relative)(
+              opts.api.paths.absPagesPath,
+              opts.api.config.alias["@"]
+            )}/`
+          );
         }
         component = (0, import_utils.winPath)(
           import_utils.resolve.sync(localPath(component), {
@@ -74,7 +80,7 @@ async function getRoutes(opts) {
           })
         );
         component = component.replace(
-          (0, import_utils.winPath)(`${opts.api.paths.absSrcPath}/`),
+          (0, import_utils.winPath)(`${opts.api.config.alias["@"]}/`),
           "@/"
         );
         return component;
@@ -100,7 +106,13 @@ async function getRoutes(opts) {
       const basedir = ((_c = opts.api.config.conventionRoutes) == null ? void 0 : _c.base) || opts.api.paths.absPagesPath;
       if (!(0, import_path.isAbsolute)(file)) {
         if (file.startsWith("@/")) {
-          file = file.replace("@/", "../");
+          file = file.replace(
+            "@/",
+            `${(0, import_path.relative)(
+              opts.api.paths.absPagesPath,
+              opts.api.config.alias["@"]
+            )}/`
+          );
         }
         file = import_utils.resolve.sync(localPath(file), {
           basedir,
diff --git a/dist/features/tmpFiles/tmpFiles.js b/dist/features/tmpFiles/tmpFiles.js
index 1a9a2c0724a41e4e65fd2b5297c1cb7430455992..c2025703dc29d517343aaf6ac515c045d1da2260 100644
--- a/dist/features/tmpFiles/tmpFiles.js
+++ b/dist/features/tmpFiles/tmpFiles.js
@@ -69,7 +69,7 @@ var tmpFiles_default = (api) => {
       })
     );
     const srcPrefix = api.appData.hasSrcDir ? "src/" : "";
-    const umiTempDir = `${srcPrefix}.umi`;
+    const umiTempDir = (0, import_path.relative)(api.cwd, api.paths.absTmpPath);
     const baseUrl = api.appData.hasSrcDir ? "../../" : "../";
     const isTs5 = (_a = api.appData.typescript.tsVersion) == null ? void 0 : _a.startsWith("5");
     const isTslibInstalled = !!api.appData.typescript.tslibVersion;
@@ -349,10 +349,11 @@ export default function EmptyRoute() {
       api.appData.routes = routes;
     }
     const hasSrc = api.appData.hasSrcDir;
-    const pages = (0, import_path.basename)(
+    const pages = (0, import_path.relative)(
+      api.cwd,
       ((_b = api.config.conventionRoutes) == null ? void 0 : _b.base) || api.paths.absPagesPath
     );
-    const prefix = hasSrc ? `../../../src/${pages}/` : `../../${pages}/`;
+    const prefix = hasSrc ? `../../../${pages}/` : `../../${pages}/`;
     const clonedRoutes = import_utils.lodash.cloneDeep(routes);
     for (const id of Object.keys(clonedRoutes)) {
       for (const key of Object.keys(clonedRoutes[id])) {
diff --git a/dist/libs/folderCache/AutoUpdateFolderCache.d.ts b/dist/libs/folderCache/AutoUpdateFolderCache.d.ts
index c18911db8edf174f150a2249d8e7cf35ae024304..62a30124ea0d2a4e9a5c70df7e0b11cfd2b7250d 100644
--- a/dist/libs/folderCache/AutoUpdateFolderCache.d.ts
+++ b/dist/libs/folderCache/AutoUpdateFolderCache.d.ts
@@ -16,7 +16,7 @@ export declare class AutoUpdateFolderCache {
         ignored: string[];
         filesLoader?: (files: string[]) => Promise<Record<string, string>>;
     });
-    unwatch(): Promise<void>;
+    unwatch(): any;
     init(): Promise<void>;
     private watchAll;
     getFileCache(): FileContentCache;
diff --git a/dist/libs/folderCache/AutoUpdateSourceCodeCache.d.ts b/dist/libs/folderCache/AutoUpdateSourceCodeCache.d.ts
index 17ca65caddcf47c52ce3eb5da7238df8dbb95dea..99862c4def85a79627c0db46ae3f40fc5ced55d5 100644
--- a/dist/libs/folderCache/AutoUpdateSourceCodeCache.d.ts
+++ b/dist/libs/folderCache/AutoUpdateSourceCodeCache.d.ts
@@ -25,5 +25,5 @@ export declare class AutoUpdateSrcCodeCache {
         imports: readonly ImportSpecifier[];
     };
     register(l: Listener): () => void;
-    unwatch(): Promise<void>;
+    unwatch(): any;
 }
diff --git a/dist/libs/scan.d.ts b/dist/libs/scan.d.ts
index 9862f8ea8355f06a3f8b3f443b190bb2c10ec4d9..857af2c0317f0c4f0a44d56c64483238d1c008a1 100644
--- a/dist/libs/scan.d.ts
+++ b/dist/libs/scan.d.ts
@@ -24,10 +24,5 @@ export declare function scan(opts: {
     entry: string;
     externals: any;
     resolver: any;
-}): Promise<Record<string, {
-    version: string;
-    matches: string[];
-    subpaths: string[];
-    external?: boolean | undefined;
-}>>;
+}): Promise<Service>;
 export {};